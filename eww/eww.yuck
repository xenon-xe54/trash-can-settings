(include "./main-widget.yuck")
(defpoll bluetooth_status :interval "2s" :initial "󰂯" `bluetoothctl show | grep "Powered:" 2>/dev/null || echo "Powered: yes"`)
(defpoll current_volume :interval "1s" "pamixer --get-volume Master '{ print $2 }' ")
(defpoll volume_status :interval "1s" "pamixer --get-mute Master '{ print $2 }' ")

(defpoll record_status :interval "1s" :initial "" `pgrep wf-recorder 2>/dev/null || echo ""`)
(defpoll clipboard_state :interval "1s" :initial "" `wl-paste -l 2>/dev/null || echo ""`)


(defwidget qs_module []
	(box :space-evenly true
    	(button :class {record_status != "" ? "stop_record_active" : "stop_record"}
                :onclick {record_status != "" ? `pkill -f wf-recorder` : ``}
                (label :text "󱒃"))
    (eventbox :cursor "pointer"
      (box :class "qs_module" 
      	   :space-evenly false 
      	   :orientation "h" :spacing "3"
           (button :class "qs_button_class"
        		   :style "background: #223b54;"
                   :onclick "eww open-many --toggle qs_popup"
                   (label :text "Settings"))))
                   ))
  



(defwindow qs_popup []
	:monitor 0
  	:stacking "fg"
 	:geometry (geometry :x "25px"
               			:y "60px"
               			:anchor "bottom right"
               			:width "200px"
               			:height "30px") 
  (box 
		:class "qs_popup"
  		:orientation "v"
       :space-evenly false
       :halign "end"
    (qs_buttons)
    (qs_sliders)))


(defwindow screen_popup []
	:monitor 0
  	:stacking "fg"
 	:geometry (geometry :x "25px"
               			:y "47px"
               			:anchor "bottom center"
               			:width "110px"
               			:height "50px") 
  (box 
		:class "screen_popup"
  		:orientation "v"
  		:space-evenly false
       :halign "end"
    (screenshot_buttons)
    (screencast_buttons)))


(defwidget screenshot_buttons []
  		 (box :class "screenshot_buttons"
    	 	  :orientation "horizontal"
    	 	  :space-evenly true
      	 	  (button :class "screenshot_button"
      			 	  :height 40
      			 	  :width 30
      			 	  :onclick `grim - | wl-copy`
      			 	  :style "background: transparent;"
      			 	  (label :text "󰹑"))
    	 	  (button :class "screenshot_button"
      			 	  :height 40
      			 	  :width 30  
      			 	  :onclick `grim -g "$(slurp -d)" - | wl-copy`
      			 	  :style "background: transparent;"
      			 	  (label :text ""))
    	 	  (button :class {clipboard_state!= "image/png" ? "screenshot_button_disable" : "screenshot_button"}
      			 	  :height 40
      			 	  :width 30  
      			 	  :onclick {clipboard_state!= "image/png" ? `` : `wl-paste > ~/Изображения/Screenshots/$(date +'%s_grim.png')`}
      			 	  :style "background: transparent;"
      			 	  (label :text ""))))


(defwidget screencast_buttons []
     	  (box :class "screencast_buttons"
         	   :orientation "horizontal"
         	   :space-evenly true
           	   (button :class "qs_button"
           			   :height 40
           			 :width 40
           			 :onclick {record_status == "" ? `wf-recorder -a -D --codec=h264_vaapi -f ~/Видео/Screencasts/$(date +'%s_record').mp4 &` : `pkill -f wf-recorder`}
           			 :style "background: transparent;"
           			 (label :text {record_status == "" ? "󰹑 󰑋" : " 󰑋"}))
         	 (button :class "qs_button"
           			 :height 40
           			 :width 40  
           			 :onclick {record_status == "" ? `wf-recorder -g "$(slurp)" -a -D --codec=h264_vaapi -f ~/Видео/Screencasts/$(date +'%s_record').mp4 &` : `pkill -f wf-recorder`}
           			 :style "background: transparent;"
           			 (label :text {record_status == "" ? " 󰑋" : " 󰑋"}))))


 




(defwidget qs_sliders []
  	(box :class "qs_container_sliders"
    	 :orientation "vertical"
    	 :space-evenly true
    	 (volum)))


(defwidget volum []
  (box  :orientation "h" 	  
			  :space-evenly "false" 
			  :spacing "0" 

    (box :orientation "h" :halign "start"
    	(button :class "volume_button_mute"
    	        :style "background: transparent;"
    	        :onclick "pamixer --toggle-mute"
    	        (label :text {volume_status || current_volume == 0 ? "󰝟" : "󰕾" })))
    	         
    
    (box :orientation "h" :halign "start"
        (scale  :class "volbar" 	  
			          :value {volume_status ? 0 : current_volume} 
			          :orientation "h"      
			          :flipped false 
			          :tooltip "Volume: ${current_volume}%" 
			          :max 101 
			          :min 0 
			          :onchange "pamixer --unmute --set-volume {}" ))
			          
    (button :class "volume_button_settings"
    		:style "background: transparent;"
      		:onclick `foot --title 'Audio' ncpamixer &`
      		(label :text ""))))

(defwidget qs_buttons []
  	(box :class "qs_container_buttons"
    	 :orientation "horizontal"
    	 :space-evenly false
      	 (button :class "qs_screen"
      			 :height 40
      			 :width 40
      			 :onclick `eww open-many --toggle screen_popup`
      			 :style "background: transparent;"
      			 (label :text "󰄘"))
    	 (button :class {bluetooth_status =~ "Powered: yes" ? "qs_button qs_bluetooth qs_bluetooth_active" : "qs_button qs_bluetooth" }
      			 :height 40
      			 :width 40  
      			 :onclick `foot --title 'Bluetooth' bluetuith &`
      			 :onmiddleclick `rfkill toggle bluetooth`
      			 :style {bluetooth_status =~ "Powered: yes" ? "background:#f7f9bf;" : "background:transparent;" }
      			 (label :text {bluetooth_status =~ "Powered: yes" ? "󰂯" : "󰂲" }))
    	 (button :class "qs_button qs-network"
      			 :height 40
      			 :width 40
      			 :onclick `foot --title 'Network' nmtui & `
      			 :style "background: transparent;"
      			 (label :text "Net"))))


(defwidget top-center []
  (box :orientation "h"
   	   :space-evenly false
       :halign "center"
   	   :class "top_center_modules"
   (clock_module)
   ))

(defwidget bottom-end []
  (box :orientation "h"
   	   :space-evenly false
   	   :valign "end"	  
   	   :halign "end"
   	   :class "bottom_right_modules"
   	   (qs_module)))

(defwindow top-items
	:monitor 0
    :geometry (geometry :x "0%"
                        :y "7px"
                        :width "200px"
                        :height "35px"
                        :anchor "top center")
    :stacking "fg"
    :windowtype "desktop"
    (box :class "top_items" :orientation "h"
     (top-center)
     ))

(defwindow bottom-items
	:monitor 0
    :geometry (geometry :x "0%"
                        :y "7px"
                        :width "200px"
                        :height "35px"
                        :anchor "bottom right")
    :stacking "fg"
    :windowtype "desktop"
    (box :class "bottom_items" :orientation "v"
     (bottom-end)
     ))
